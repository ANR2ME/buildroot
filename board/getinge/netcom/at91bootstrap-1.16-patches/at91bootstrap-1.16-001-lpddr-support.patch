This patch modifies the DRAM controler initialization to support the
LPDDR of the Getinge NetCOM board. Code written by Adeneo/Adetel
hardware engineers.

Index: Bootstrap-v1.16/board/at91sam9m10g45ek/at91sam9m10g45ek.c
===================================================================
--- Bootstrap-v1.16.orig/board/at91sam9m10g45ek/at91sam9m10g45ek.c	2011-08-01 13:53:45.000000000 +0200
+++ Bootstrap-v1.16/board/at91sam9m10g45ek/at91sam9m10g45ek.c	2011-08-01 14:08:13.556073693 +0200
@@ -114,33 +114,38 @@
 
 #ifdef CFG_DDRAM
 static	SDdramConfig ddram_config = {	
-	.ddramc_mdr  = (AT91C_DDRC2_DBW_16_BITS | AT91C_DDRC2_MD_DDR2_SDRAM),
+	.ddramc_mdr  = (AT91C_DDRC2_DBW_16_BITS | AT91C_DDRC2_MD_LP_DDR_SDRAM),
 		
 	.ddramc_cr   = (AT91C_DDRC2_NC_DDR10_SDR9  |     	// 10 column bits (1K)
 			AT91C_DDRC2_NR_14          |     	// 14 row bits    (8K)
 			AT91C_DDRC2_CAS_3          |     	// CAS Latency 3
-			AT91C_DDRC2_DLL_RESET_DISABLED),	// DLL not reset
+			AT91C_DDRC2_DLL_DISABLE),	// DLL disabled
 
-	.ddramc_rtr  = 	0x24B,
+	.ddramc_rtr  = 	0x208,
 
 	.ddramc_t0pr = (AT91C_DDRC2_TRAS_6  |		//  6 * 7.5 = 45   ns
-			AT91C_DDRC2_TRCD_2  |		//  2 * 7.5 = 22.5 ns
+			AT91C_DDRC2_TRCD_3  |		//  3 * 7.5 = 22.5 ns
 			AT91C_DDRC2_TWR_2   |		//  2 * 7.5 = 15   ns
-			AT91C_DDRC2_TRC_8  |		//  8 * 7.5 = 75   ns
-			AT91C_DDRC2_TRP_2   |		//  2 * 7.5 = 22.5 ns
-			AT91C_DDRC2_TRRD_1  |		//  1 * 7.5 = 7.5   ns
-			AT91C_DDRC2_TWTR_1  |		//  1 clock cycle
+			AT91C_DDRC2_TRC_9   |		//  9 * 7.5 = 67.5   ns
+			AT91C_DDRC2_TRP_3   |		//  3 * 7.5 = 22.5 ns
+			AT91C_DDRC2_TRRD_2  |		//  2 * 7.5 = 15   ns
+			AT91C_DDRC2_TWTR_1  |		//  1 clock cycle          // TBC
 			AT91C_DDRC2_TMRD_2),		//  2 clock cycles
 		
-	.ddramc_t1pr = (AT91C_DDRC2_TXP_2  |		//  2 * 7.5 = 15 ns
-			200 << 16           |		// 200 clock cycles, TXSRD: Exit self refresh delay to Read command
-			16 << 8             |		// 16 * 7.5 = 120 ns TXSNR: Exit self refresh delay to non read command
-			AT91C_DDRC2_TRFC_14 << 0),	// 14 * 7.5 = 142 ns (must be 140 ns for 1Gb DDR)
+	.ddramc_t1pr = (AT91C_DDRC2_TXP_1  |		//  1 * 7.5 = 7.5 ns // TBC
+			16 << 8             |		// 16 * 7.5 = 120 ns TXS(N)R
+			AT91C_DDRC2_TRFC_11),	    // 11 * 7.5 = 82.5 ns (> 80 ns)
 
-	.ddramc_t2pr = (AT91C_DDRC2_TRTP_1   |		//  1 * 7.5 = 7.5 ns
+	.ddramc_lpr = (0 << 4  |			// PASR 		// TBC
+			0 << 8             |		// TCR			// TBC
+			0 << 10),	    			// DS			// TBC
+
+
+	.ddramc_t2pr = (AT91C_DDRC2_TRTP_1  /* |		//  1 * 7.5 = 7.5 ns
 			AT91C_DDRC2_TRPA_0   |		//  0 * 7.5 = 0 ns
 			AT91C_DDRC2_TXARDS_7 |		//  7 clock cycles
-			AT91C_DDRC2_TXARD_2),		//  2 clock cycles
+			AT91C_DDRC2_TXARD_2*/),		//  2 clock cycles
+			
 };
 
 /*------------------------------------------------------------------------------*/
@@ -162,8 +167,7 @@
 	writel(readl(AT91C_BASE_CCFG + CCFG_EBICSA) & ~(1<<16), AT91C_BASE_CCFG + CCFG_EBICSA);
 	
 	/* EBI DDRAM controller */
-	ddram_init(AT91C_BASE_DDR2CP1, AT91C_EBI_CS1, &ddram_config);
-
+	//ddram_init(AT91C_BASE_DDR2CP1, AT91C_EBI_CS1, &ddram_config);
 }
 #endif /* CFG_DDRAM */
 
Index: Bootstrap-v1.16/driver/ddramc.c
===================================================================
--- Bootstrap-v1.16.orig/driver/ddramc.c	2011-08-01 13:53:45.000000000 +0200
+++ Bootstrap-v1.16/driver/ddramc.c	2011-08-01 14:08:50.216073713 +0200
@@ -56,12 +56,13 @@
 int ddram_init(unsigned int ddram_controller_address, unsigned int ddram_address, struct SDdramConfig *ddram_config)
 {
 	volatile unsigned int i;
-	unsigned int cr = 0;
+	//unsigned int cr = 0;
 	
 	// Step 1: Program the memory device type
 	// Configure the DDR controller
 	write_ddramc(ddram_controller_address, HDDRSDRC2_MDR, ddram_config->ddramc_mdr);
 
+	// Step 2: Program the features of the LPDDR
 	// Program the DDR Controller
 	write_ddramc(ddram_controller_address, HDDRSDRC2_CR, ddram_config->ddramc_cr); 
 
@@ -74,26 +75,19 @@
 	// pSDDRC->HDDRSDRC2_T2PR 
 	write_ddramc(ddram_controller_address, HDDRSDRC2_T2PR, ddram_config->ddramc_t2pr);
 
-	// Initialization Step 3: NOP command -> allow to enable clk
+	// Step 3: Program the LPDDR
+	write_ddramc(ddram_controller_address, HDDRSDRC2_LPR, ddram_config->ddramc_lpr);
+	
+	// Step 4: NOP command -> allow to enable clk
 	write_ddramc(ddram_controller_address, HDDRSDRC2_MR, AT91C_DDRC2_MODE_NOP_CMD);
 	*((unsigned volatile int*) ddram_address) = 0;
  
-	// Initialization Step 3 (must wait 200 us) (6 core cycles per iteration, core is at 396MHz: min 13200 loops)
+	// must wait 200 us (6 core cycles per iteration, core is at 396MHz: min 13200 loops)
 	for (i = 0; i < 13300; i++) {
 		asm("    nop");
 	}
 	
-	// Step 4:  An NOP command is issued to the DDR2-SDRAM 
-	// NOP command -> allow to enable cke
-	write_ddramc(ddram_controller_address, HDDRSDRC2_MR, AT91C_DDRC2_MODE_NOP_CMD);
-	*((unsigned volatile int*) ddram_address) = 0;
-
-	// wait 400 ns min
-	for (i = 0; i < 100; i++) {
-		asm("    nop");
-	}
-
-	// Initialization Step 5: Set All Bank Precharge
+	// Step 5: Set All Bank Precharge
 	write_ddramc(ddram_controller_address, HDDRSDRC2_MR, AT91C_DDRC2_MODE_PRCGALL_CMD);
 	*((unsigned volatile int*) ddram_address) = 0;
 
@@ -102,56 +96,7 @@
 		asm("    nop");
 	}
 
-       // Initialization Step 6: Set EMR operation (EMRS2)
-	write_ddramc(ddram_controller_address, HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD);
-	*((unsigned int *)(ddram_address + 0x4000000)) = 0;
-
-	// wait 2 cycles min
-	for (i = 0; i < 100; i++) {
-		asm("    nop");
-	}
-
-	// Initialization Step 7: Set EMR operation (EMRS3)
-	write_ddramc(ddram_controller_address, HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD);
-	*((unsigned int *)(ddram_address + 0x6000000)) = 0;
-
-	// wait 2 cycles min
-	for (i = 0; i < 100; i++) {
-		asm("    nop");
-	}
-
-	// Initialization Step 8: Set EMR operation (EMRS1)
-	write_ddramc(ddram_controller_address, HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD);
-	*((unsigned int *)(ddram_address + 0x2000000)) = 0;
-
-	// wait 200 cycles min
-	for (i = 0; i < 10000; i++) {
-		asm("    nop");
-	}
-
-	// Initialization Step 9: enable DLL reset
-	cr = read_ddramc(ddram_controller_address, HDDRSDRC2_CR);
-	write_ddramc(ddram_controller_address, HDDRSDRC2_CR, cr | AT91C_DDRC2_DLL_RESET_ENABLED);
-
-	// Initialization Step 10: reset DLL
-	write_ddramc(ddram_controller_address, HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD);
-	*(((unsigned volatile int*) ddram_address)) = 0;
-
-	// wait 2 cycles min
-	for (i = 0; i < 100; i++) {
-		asm("    nop");
-	}
-
-	// Initialization Step 11: Set All Bank Precharge
-	write_ddramc(ddram_controller_address, HDDRSDRC2_MR, AT91C_DDRC2_MODE_PRCGALL_CMD);
-	*(((unsigned volatile int*) ddram_address)) = 0;
-
-	// wait 400 ns min
-	for (i = 0; i < 100; i++) {
-		asm("    nop");
-	}
-
-	// Initialization Step 12: Two auto-refresh (CBR) cycles are provided. Program the auto refresh command (CBR) into the Mode Register.
+	// Step 6: Two auto-refresh (CBR) cycles are provided. Program the auto refresh command (CBR) into the Mode Register.
 	write_ddramc(ddram_controller_address, HDDRSDRC2_MR, AT91C_DDRC2_MODE_RFSH_CMD);
 	*(((unsigned volatile int*) ddram_address)) = 0;
 
@@ -168,49 +113,20 @@
 	for (i = 0; i < 100; i++) {
 		asm("    nop");
 	}
-
-	// Initialization Step 13: Program DLL field into the Configuration Register to low(Disable DLL reset).
-	cr = read_ddramc(ddram_controller_address, HDDRSDRC2_CR);
-	write_ddramc(ddram_controller_address, HDDRSDRC2_CR, cr & (~AT91C_DDRC2_DLL_RESET_ENABLED));
-
-	// Initialization Step 14: A Mode Register set (MRS) cycle is issued to program the parameters of the DDR2-SDRAM devices.
-	write_ddramc(ddram_controller_address, HDDRSDRC2_MR, AT91C_DDRC2_MODE_LMR_CMD);
-	*(((unsigned volatile int*) ddram_address)) = 0;
-
-	// Step 15: Program OCD field into the Configuration Register to high (OCD calibration default).
-	cr = read_ddramc(ddram_controller_address, HDDRSDRC2_CR);
-	write_ddramc(ddram_controller_address, HDDRSDRC2_CR, cr | AT91C_DDRC2_OCD_DEFAULT);
-
-	// Step 16: An Extended Mode Register set (EMRS1) cycle is issued to OCD default value.
-	write_ddramc(ddram_controller_address, HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD);
-	*(((unsigned int*) (ddram_address + 0x2000000))) = 0;
-
-	// wait 2 cycles min
-	for (i = 0; i < 100; i++) {
-		asm("    nop");
-	}
-
-	// Step 17: Program OCD field into the Configuration Register to low (OCD calibration mode exit).
-	cr = read_ddramc(ddram_controller_address, HDDRSDRC2_CR);
-	write_ddramc(ddram_controller_address, HDDRSDRC2_CR, cr & (~AT91C_DDRC2_OCD_EXIT));
-
-	// Step 18: An Extended Mode Register set (EMRS1) cycle is issued to enable OCD exit.
+	
+	// Step 7: An Extended Mode Register set (EMRS) cycle is issued to program the low-power DDR1-SDRAM parameters
 	write_ddramc(ddram_controller_address, HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD);
-	*(((unsigned int*) (ddram_address + 0x6000000))) = 0;
+	*(((unsigned volatile int*) (ddram_address + 0x4000000))) = 0; // TBC
 
-	// wait 2 cycles min
-	for (i = 0; i < 100; i++) {
-		asm("    nop");
-	}
+	// Step 8: An Mode Register set (MRS) cycle is issued to program the parameters of the low-power DDR1-SDRAM device
+	write_ddramc(ddram_controller_address, HDDRSDRC2_MR, AT91C_DDRC2_MODE_LMR_CMD);
+	*(((unsigned volatile int*) (ddram_address))) = 0;
 
-	// Step 19,20: A mode Normal command is provided. Program the Normal mode into Mode Register.
+	// Step 9,10: A mode Normal command is provided. Program the Normal mode into Mode Register.
 	write_ddramc(ddram_controller_address, HDDRSDRC2_MR, AT91C_DDRC2_MODE_NORMAL_CMD);
 	*(((unsigned volatile int*) ddram_address)) = 0;
 
-	// Step 21: Write the refresh rate into the count field in the Refresh Timer register. The DDR2-SDRAM device requires a
-	// refresh every 15.625 ¦Is or 7.81 ¦Ìs. With a 100MHz frequency, the refresh timer count register must to be set with
-	// (15.625 /100 MHz) = 1562 i.e. 0x061A or (7.81 /100MHz) = 781 i.e. 0x030d.
-
+	// Step 11: Write the refresh rate into the count field in the Refresh Timer register.
 	// Set Refresh timer
 	write_ddramc(ddram_controller_address, HDDRSDRC2_RTR, ddram_config->ddramc_rtr);
 
Index: Bootstrap-v1.16/include/AT91SAM9G45_inc.h
===================================================================
--- Bootstrap-v1.16.orig/include/AT91SAM9G45_inc.h	2011-08-01 13:53:45.000000000 +0200
+++ Bootstrap-v1.16/include/AT91SAM9G45_inc.h	2011-08-01 14:07:23.216073665 +0200
@@ -281,6 +281,9 @@
 #define 	AT91C_DDRC2_DLL_RESET_DISABLED       (0x0 <<  7) // (HDDRSDRC2) DLL normal mode
 #define 	AT91C_DDRC2_DLL_RESET_ENABLED        (0x1 <<  7) // (HDDRSDRC2) Reset DLL
 #define AT91C_DDRC2_DIC_DS        (0x1 <<  8) // (HDDRSDRC2) Output driver impedance control
+#define AT91C_DDRC2_DIS_DLL       (0x1 <<  9) // (HDDRSDRC2) Disable DLL
+#define 	AT91C_DDRC2_DLL_ENABLE               (0x0 <<  9) // (HDDRSDRC2) Enable DLL
+#define 	AT91C_DDRC2_DLL_DISABLE              (0x1 <<  9) // (HDDRSDRC2) Disable DLL
 #define AT91C_DDRC2_OCD           (0x7 << 12) // (HDDRSDRC2) Off chip driver
 #define 	AT91C_DDRC2_OCD_EXIT                 (0x0 << 12) // (HDDRSDRC2) Exit OCD calibration mode.
 #define 	AT91C_DDRC2_OCD_DEFAULT              (0x7 << 12) // (HDDRSDRC2) Program OCD calibration default value.
Index: Bootstrap-v1.16/include/ddramc.h
===================================================================
--- Bootstrap-v1.16.orig/include/ddramc.h	2011-08-01 13:53:45.000000000 +0200
+++ Bootstrap-v1.16/include/ddramc.h	2011-08-01 14:07:23.216073665 +0200
@@ -41,6 +41,7 @@
 	unsigned int ddramc_t0pr;
 	unsigned int ddramc_t1pr;
 	unsigned int ddramc_t2pr;
+	unsigned int ddramc_lpr;
 } SDdramConfig, *PSDdramConfig;
 
 extern int ddram_init(unsigned int ddram_controller_address, unsigned int ddram_address, struct SDdramConfig *ddram_config);
