diff --git a/src/bw_pipe.c b/src/bw_pipe.c
index bee2b78..0c085a5 100644
--- a/src/bw_pipe.c
+++ b/src/bw_pipe.c
@@ -42,7 +42,11 @@ initialize(iter_t iterations, void *cookie)
 		exit(1);
 	}
 	handle_scheduler(benchmp_childid(), 0, 1);
+#ifdef __NOMMU__
+	switch (state->pid = vfork()) {
+#else
 	switch (state->pid = fork()) {
+#endif
 	    case 0:
 		close(pipes[0]);
 		handle_scheduler(benchmp_childid(), 1, 1);
diff --git a/src/bw_tcp.c b/src/bw_tcp.c
index cc27098..1e5528a 100644
--- a/src/bw_tcp.c
+++ b/src/bw_tcp.c
@@ -51,7 +51,11 @@ main(int ac, char **av)
 	while (( c = getopt(ac, av, "sS:m:M:P:W:N:")) != EOF) {
 		switch(c) {
 		case 's': /* Server */
+#ifdef __NOMMU__
+			if (vfork() == 0) {
+#else
 			if (fork() == 0) {
+#endif
 				server_main();
 			}
 			exit(0);
@@ -190,7 +194,11 @@ server_main()
 	signal(SIGCHLD, sigchld_wait_handler);
 	for ( ;; ) {
 		newdata = tcp_accept(data, SOCKOPT_WRITE);
+#ifdef __NOMMU__
+		switch (vfork()) {
+#else
 		switch (fork()) {
+#endif
 		    case -1:
 			perror("fork");
 			break;
diff --git a/src/bw_unix.c b/src/bw_unix.c
index ad71157..f9bb18c 100644
--- a/src/bw_unix.c
+++ b/src/bw_unix.c
@@ -52,7 +52,11 @@ initialize(iter_t iterations, void* cookie)
 		return;
 	}
 	handle_scheduler(benchmp_childid(), 0, 1);
+#ifdef __NOMMU__
+	switch (state->pid = vfork()) {
+#else
 	switch (state->pid = fork()) {
+#endif
 	    case 0:
 	      handle_scheduler(benchmp_childid(), 1, 1);
 		close(state->control[1]);
diff --git a/src/lat_cmd.c b/src/lat_cmd.c
index 1a2ee7e..5556d22 100644
--- a/src/lat_cmd.c
+++ b/src/lat_cmd.c
@@ -89,7 +89,11 @@ bench(register iter_t iterations, void *cookie)
 
 	signal(SIGCHLD, SIG_DFL);
 	while (iterations-- > 0) {
+#ifdef __NOMMU__
+		switch (state->pid = vfork()) {
+#else
 		switch (state->pid = fork()) {
+#endif
 		case '0':
 			execvp(state->argv[0], state->argv);
 			/*NOTREACHED*/
diff --git a/src/lat_connect.c b/src/lat_connect.c
index 4e5538e..1724a9c 100644
--- a/src/lat_connect.c
+++ b/src/lat_connect.c
@@ -43,7 +43,11 @@ main(int ac, char **av)
 	while (( c = getopt(ac, av, "sSP:W:N:")) != EOF) {
 		switch(c) {
 		case 's': /* Server */
+#ifdef __NOMMU__
+			if (vfork() == 0) {
+#else
 			if (fork() == 0) {
+#endif
 				server_main();
 			}
 			exit(0);
diff --git a/src/lat_ctx.c b/src/lat_ctx.c
index eb9e49f..68750b0 100644
--- a/src/lat_ctx.c
+++ b/src/lat_ctx.c
@@ -312,7 +312,11 @@ create_daemons(int **p, pid_t *pids, int procs, int process_size)
 	 */
 	handle_scheduler(benchmp_childid(), 0, procs-1);
      	for (i = 1; i < procs; ++i) {
+#ifdef __NOMMU__
+		switch (pids[i] = vfork()) {
+#else
 		switch (pids[i] = fork()) {
+#endif
 		    case -1:	/* could not fork, out of processes? */
 			return i;
 
diff --git a/src/lat_fcntl.c b/src/lat_fcntl.c
index 01847a8..9cb187e 100644
--- a/src/lat_fcntl.c
+++ b/src/lat_fcntl.c
@@ -137,7 +137,11 @@ initialize(iter_t iterations, void* cookie)
 		exit(1);
 	}
 	handle_scheduler(benchmp_childid(), 0, 1);
+#ifdef __NOMMU__
+	switch (state->pid = vfork()) {
+#else
 	switch (state->pid = fork()) {
+#endif
 	case -1:
 		perror("fork");
 		exit(1);
diff --git a/src/lat_fifo.c b/src/lat_fifo.c
index 2abd699..221fbd4 100644
--- a/src/lat_fifo.c
+++ b/src/lat_fifo.c
@@ -86,7 +86,11 @@ initialize(iter_t iterations, void *cookie)
 		exit(1);
 	}
 	handle_scheduler(benchmp_childid(), 0, 1);
+#ifdef __NOMMU__
+	switch (state->pid = vfork()) {
+#else
 	switch (state->pid = fork()) {
+#endif
 	    case 0:
 		handle_scheduler(benchmp_childid(), 1, 1);
 		state->rd = open(state->filename1, O_RDONLY);
diff --git a/src/lat_pipe.c b/src/lat_pipe.c
index 0a5de9b..9840a95 100644
--- a/src/lat_pipe.c
+++ b/src/lat_pipe.c
@@ -80,7 +80,11 @@ initialize(iter_t iterations, void* cookie)
 		exit(1);
 	}
 	handle_scheduler(benchmp_childid(), 0, 1);
+#ifdef __NOMMU__
+	switch (state->pid = vfork()) {
+#else
 	switch (state->pid = fork()) {
+#endif
 	    case 0:
 		handle_scheduler(benchmp_childid(), 1, 1);
 		signal(SIGTERM, exit);
diff --git a/src/lat_proc.c b/src/lat_proc.c
index 6142661..7f4f019 100644
--- a/src/lat_proc.c
+++ b/src/lat_proc.c
@@ -103,7 +103,11 @@ do_shell(iter_t iterations, void* cookie)
 	signal(SIGCHLD, SIG_DFL);
 	handle_scheduler(benchmp_childid(), 0, 1);
 	while (iterations-- > 0) {
+#ifdef __NOMMU__
+		switch (child_pid = vfork()) {
+#else
 		switch (child_pid = fork()) {
+#endif
 		case -1:
 			perror("fork");
 			exit(1);
@@ -131,7 +135,11 @@ do_forkexec(iter_t iterations, void* cookie)
 	while (iterations-- > 0) {
 		nav[0] = PROG;
 		nav[1] = 0;
+#ifdef __NOMMU__
+		switch (child_pid = vfork()) {
+#else
 		switch (child_pid = fork()) {
+#endif
 		case -1:
 			perror("fork");
 			exit(1);
@@ -155,7 +163,11 @@ do_fork(iter_t iterations, void* cookie)
 	signal(SIGCHLD, SIG_DFL);
 	handle_scheduler(benchmp_childid(), 0, 1);
 	while (iterations-- > 0) {
+#ifdef __NOMMU__
+		switch (child_pid = vfork()) {
+#else
 		switch (child_pid = fork()) {
+#endif
 		case -1:
 			perror("fork");
 			exit(1);
diff --git a/src/lat_rpc.c b/src/lat_rpc.c
index 9c02192..48c4361 100644
--- a/src/lat_rpc.c
+++ b/src/lat_rpc.c
@@ -105,7 +105,11 @@ main(int ac, char **av)
 	while (( c = getopt(ac, av, "sS:m:p:P:W:N:")) != EOF) {
 		switch(c) {
 		case 's': /* Server */
+#ifdef __NOMMU__
+			if (vfork() == 0) {
+#else
 			if (fork() == 0) {
+#endif
 				server_main();
 			}
 			exit(0);
diff --git a/src/lat_select.c b/src/lat_select.c
index 5217878..b02ec27 100644
--- a/src/lat_select.c
+++ b/src/lat_select.c
@@ -126,7 +126,11 @@ server(void* cookie)
 	}
 
 	/* Start a server process to accept client connections */
+#ifdef __NOMMU__
+	switch(state->pid = vfork()) {
+#else
 	switch(state->pid = fork()) {
+#endif
 	case 0:
 		/* child server process */
 		while (pid == getppid()) {
diff --git a/src/lat_sem.c b/src/lat_sem.c
index 192ef04..cd0fd3f 100644
--- a/src/lat_sem.c
+++ b/src/lat_sem.c
@@ -77,7 +77,11 @@ initialize(iter_t iterations, void* cookie)
 	semctl(state->semid, 1, SETVAL, 0);
 
 	handle_scheduler(benchmp_childid(), 0, 1);
+#ifdef __NOMMU__
+	switch (state->pid = vfork()) {
+#else
 	switch (state->pid = fork()) {
+#endif
 	    case 0:
 		signal(SIGTERM, exit);
 		handle_scheduler(benchmp_childid(), 1, 1);
diff --git a/src/lat_tcp.c b/src/lat_tcp.c
index 6a11996..d1e79e7 100644
--- a/src/lat_tcp.c
+++ b/src/lat_tcp.c
@@ -45,7 +45,11 @@ main(int ac, char **av)
 	while (( c = getopt(ac, av, "sS:m:P:W:N:")) != EOF) {
 		switch(c) {
 		case 's': /* Server */
+#ifdef __NOMMU__
+			if (vfork() == 0) {
+#else
 			if (fork() == 0) {
+#endif
 				server_main();
 			}
 			exit(0);
@@ -140,7 +144,11 @@ server_main()
 	sock = tcp_server(TCP_XACT, SOCKOPT_REUSE);
 	for (;;) {
 		newsock = tcp_accept(sock, SOCKOPT_NONE);
+#ifdef __NOMMU__
+		switch (vfork()) {
+#else
 		switch (fork()) {
+#endif
 		    case -1:
 			perror("fork");
 			break;
diff --git a/src/lat_udp.c b/src/lat_udp.c
index cdd2e9b..bd6ec65 100644
--- a/src/lat_udp.c
+++ b/src/lat_udp.c
@@ -53,7 +53,11 @@ main(int ac, char **av)
 	while (( c = getopt(ac, av, "sS:m:P:W:N:")) != EOF) {
 		switch(c) {
 		case 's': /* Server */
+#ifdef __NOMMU__
+			if (vfork() == 0) {
+#else
 			if (fork() == 0) {
+#endif
 				server_main();
 			}
 			exit(0);
diff --git a/src/lat_unix.c b/src/lat_unix.c
index 43ad6a3..24ab831 100644
--- a/src/lat_unix.c
+++ b/src/lat_unix.c
@@ -85,7 +85,11 @@ initialize(iter_t iterations, void* cookie)
 	}
 	handle_scheduler(benchmp_childid(), 0, 1);
 
+#ifdef __NOMMU__
+	if (pState->pid = vfork())
+#else
 	if (pState->pid = fork())
+#endif
 		return;
 
 	handle_scheduler(benchmp_childid(), 1, 1);
diff --git a/src/lat_unix_connect.c b/src/lat_unix_connect.c
index a66b256..a6b4327 100644
--- a/src/lat_unix_connect.c
+++ b/src/lat_unix_connect.c
@@ -40,7 +40,11 @@ int main(int ac, char **av)
 	/* Start the server "-s" or Shut down the server "-S" */
 	if (ac == 2) {
 		if (!strcmp(av[1], "-s")) {
+#ifdef __NOMMU__
+			if (vfork() == 0) {
+#else
 			if (fork() == 0) {
+#endif
 				server_main();
 			}
 			exit(0);
diff --git a/src/lib_timing.c b/src/lib_timing.c
index 714f0da..49fea05 100644
--- a/src/lib_timing.c
+++ b/src/lib_timing.c
@@ -228,7 +228,11 @@ benchmp(benchmp_f initialize,
 #ifdef _DEBUG
 		fprintf(stderr, "benchmp(%p, %p, %p, %d, %d, %d, %d, %p): creating child %d\n", initialize, benchmark, cleanup, enough, parallel, warmup, repetitions, cookie, i);
 #endif
+#ifdef __NOMMU__
+		switch(pids[i] = vfork()) {
+#else
 		switch(pids[i] = fork()) {
+#endif
 		case -1:
 			/* could not open enough children! */
 #ifdef _DEBUG
diff --git a/src/lmdd.c b/src/lmdd.c
index dee37b4..277201c 100644
--- a/src/lmdd.c
+++ b/src/lmdd.c
@@ -477,7 +477,11 @@ main(int ac, char **av)
 				if (pid) {
 					waitpid(pid, 0, 0);
 				}
+#ifdef __NOMMU__
+				if ((pid = vfork())) {
+#else
 				if ((pid = fork())) {
+#endif
 					off += moved;
 					int_count += (moved >> 2);
 					continue;
diff --git a/src/lmhttp.c b/src/lmhttp.c
index 41d9949..9c6cec3 100644
--- a/src/lmhttp.c
+++ b/src/lmhttp.c
@@ -89,7 +89,11 @@ main(int ac, char **av)
 	signal(SIGHUP, die);
 	signal(SIGTERM, die);
 	for (i = 1; i < fflg; ++i) {
+#ifdef __NOMMU__
+		if (vfork() <= 0) {
+#else
 		if (fork() <= 0) {
+#endif
 			break;
 		}
 	}
diff --git a/src/memsize.c b/src/memsize.c
index eb25a09..0b7f409 100644
--- a/src/memsize.c
+++ b/src/memsize.c
@@ -133,7 +133,11 @@ test_malloc(size_t size)
 		free(p);
 		return 1;
 	}
+#ifdef __NOMMU__
+	if (vfork() == 0) {
+#else
 	if (fork() == 0) {
+#endif
 		close(fid[0]);
 		p = malloc(size);
 		result = (p ? 1 : 0);
