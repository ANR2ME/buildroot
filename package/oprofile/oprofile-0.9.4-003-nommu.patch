--- oprofile/daemon/init.c	2011-12-27 14:35:24.538297181 +0800
+++ oprofile.nommu/daemon/init.c	2011-12-27 14:37:26.097200280 +0800
@@ -159,7 +159,11 @@
 		return;
 	jit_conversion_running = 1;
 
+#ifdef __NOMMU__
+	childpid = vfork();
+#else
 	childpid = fork();
+#endif
 	switch (childpid) {
 		case -1:
 			perror("Error forking JIT dump process!");
@@ -282,7 +286,11 @@
 	opd_do_jitdumps();
 	opd_print_stats();
 	printf("oprofiled stopped %s", op_get_time());
+#ifdef __NOMMU__
+	_exit(EXIT_FAILURE);
+#else
 	exit(EXIT_FAILURE);
+#endif
 }
 
 /* SIGCHLD received from JIT dump child process. */
--- oprofile/daemon/oprofiled.c	2011-12-27 14:46:52.370047023 +0800
+++ oprofile.nommu/daemon/oprofiled.c	2011-12-27 14:47:35.959014910 +0800
@@ -121,7 +121,11 @@
  */
 static void opd_fork(void)
 {
+#ifdef __NOMMU__
+	switch (vfork()) {
+#else
 	switch (fork()) {
+#endif
 		case -1:
 			perror("oprofiled: fork() failed: ");
 			exit(EXIT_FAILURE);
--- oprofile/daemon/opd_perfmon.c	2011-12-27 14:44:28.342045944 +0800
+++ oprofile.nommu/daemon/opd_perfmon.c	2011-12-27 14:44:58.177313156 +0800
@@ -426,7 +426,11 @@
 			exit(EXIT_FAILURE);
 		}
 
+#ifdef __NOMMU__
+		ret = vfork();
+#else
 		ret = fork();
+#endif
 		if (ret == -1) {
 			fprintf(stderr, "Couldn't fork perfmon child.\n");
 			exit(EXIT_FAILURE);
--- oprofile/libutil++/child_reader.cpp	2011-12-27 14:34:49.566280813 +0800
+++ oprofile.nommu/libutil++/child_reader.cpp	2011-12-27 14:34:30.402047223 +0800
@@ -63,7 +63,11 @@
 		return;
 	}
 
+#ifdef __NOMMU__
+	pid = vfork();
+#else
 	pid = fork();
+#endif
 	switch (pid) {
 		case -1:
 			first_error = errno;
@@ -99,7 +103,11 @@
 			// is redirect to the parent process
 			cerr << "Couldn't exec \"" << cmd << "\" : "
 			     << strerror(errno) << endl;
+#ifdef __NOMMU__
+			_exit(ret_code);
+#else
 			exit(ret_code);
+#endif
 		}
 
 		default:;
